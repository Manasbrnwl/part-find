generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  date_of_birth DateTime?
  phone_number  String?        @unique
  fcm_token     String?
  jwt_token     String?
  otp           String?
  otp_exp       DateTime?
  weight        Float?
  gender        String?
  address       String?
  state         String?
  country       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  height        Float?
  is_active     Boolean        @default(true)
  english_level String?
  role          Role?          @default(USER)
  posts         Post[]
  userImages    images[]
  comments      postApplied[]
  savePosts     savePosts[]
  UserCategory  UserCategory[]
}

model UserCategory {
  id          Int         @id @default(autoincrement())
  user_id     String
  category_id Int
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime?   @db.Timestamp(6)
  is_active   Boolean     @default(true)
  JobCategory JobCategory @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_category")
  User        User        @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_post")

  @@unique([user_id, category_id], map: "user_category_unique")
}

model images {
  id        String   @id @default(uuid())
  userId    String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Post {
  id             String         @id @default(uuid())
  userId         String
  title          String         @db.VarChar(255)
  content        String?
  requirement    String?
  total          Int            @default(1)
  endDate        DateTime
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  location       String?
  payment        Float?
  paymentDate    DateTime?
  responsibility String?
  role           String?
  startDate      DateTime       @default(now())
  is_active      Boolean        @default(true)
  company_name   String?
  user           User           @relation(fields: [userId], references: [id])
  PostCategory   PostCategory[]
  comments       postApplied[]
  savePosts      savePosts[]

  @@unique([userId, title, startDate], map: "post_unique")
}

model postApplied {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status?  @default(PENDING)
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId], map: "user_post_unique")
}

model JobCategory {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(100)
  description  String?
  is_active    Boolean        @default(true)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @db.Timestamp(6)
  PostCategory PostCategory[]
  UserCategory UserCategory[]
}

model PostCategory {
  id          Int         @id @default(autoincrement())
  post_id     String
  category_id Int
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime?   @db.Timestamp(6)
  is_active   Boolean     @default(true)
  JobCategory JobCategory @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_category")
  Post        Post        @relation(fields: [post_id], references: [id], onUpdate: NoAction, map: "fk_post")

  @@unique([post_id, category_id], map: "post_category_unique")
}

model savePosts {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId], map: "user_save_post_unique")
  @@index([userId], map: "user_save_post_index")
  @@index([postId], map: "post_save_post_index")
}

enum Role {
  USER
  ADMIN
  RECRUITER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
